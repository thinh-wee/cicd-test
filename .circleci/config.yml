# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

orbs:
  orb-tools: circleci/orb-tools@10.0.0
  slack: circleci/slack@3.4.2

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: maithinh95/cicd-test
    docker:
      - image: circleci/golang:1.15

jobs:
  slack-notify:
    orb: orb-tools/ubuntu
    steps:
      - checkout
      - slack/notify:
          message: "Start the CI / CD process:\r\nTriggered by *<https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|commit ${CIRCLE_SHA1}>* on ${CIRCLE_PROJECT_REPONAME}'s *${CIRCLE_BRANCH}* branch (<https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}|workflow here>)"
          color: "#0055c2"
          mentions: "${ORBS_USER_GROUP_UUID}"

  build:
    executor: docker-publisher

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run:
          name: Get dependencies
          command: go mod download
      - run:
          name: Test
          command: go test -v ./...
      - run:
          name: Build
          command: make build

      - run: 
          name: Failed
          command: |
            exit 1

      - slack/status:
          mentions: "${ORBS_USER_GROUP_UUID}"
          include_project_field: false
          include_job_number_field: false
          include_visit_job_action: false

      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: LOG DOCKER USERNAME environment
          command:
            echo "$DOCKERHUB_USERNAME"
      - run:
          name: LOG DOCKER PASS environment
          command:
            echo "$DOCKERHUB_PASS"
      - run: 
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest

workflows:
  version: 2
  build-master:
    jobs:
      - slack-notify:
          filters:
            branches:
              only: cd-test
      - build:
          filters:
            branches:
              only: cd-test
          post-steps:
            - slack/status:
                fail_only: true
      - publish-latest:
          requires:
            - build
          filters:
            branches:
              only: cd-test